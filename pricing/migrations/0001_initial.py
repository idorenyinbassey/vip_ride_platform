# Generated by Django 5.2.5 on 2025-08-08 15:39

import datetime
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TimeBasedPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('day_of_week', models.CharField(choices=[('weekday', 'Weekday (Monday-Friday)'), ('weekend', 'Weekend (Saturday-Sunday)'), ('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday'), ('all', 'All Days')], max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('date_from', models.DateField(blank=True, null=True)),
                ('date_until', models.DateField(blank=True, null=True)),
                ('multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.1')), django.core.validators.MaxValueValidator(Decimal('10.0'))])),
                ('normal_tier_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=5)),
                ('premium_tier_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.100'), max_digits=5)),
                ('vip_tier_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.200'), max_digits=5)),
                ('priority', models.IntegerField(default=0, help_text='Higher number = higher priority')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'time_based_pricing',
                'ordering': ['-priority', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='PricingZone',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Zone name', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('city', models.CharField(max_length=50)),
                ('country', models.CharField(default='Nigeria', max_length=50)),
                ('min_latitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('max_latitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('min_longitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('max_longitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('base_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.000'), help_text='Base pricing multiplier for this zone', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.1')), django.core.validators.MaxValueValidator(Decimal('10.0'))])),
                ('is_premium_zone', models.BooleanField(default=False)),
                ('surge_enabled', models.BooleanField(default=True)),
                ('max_surge_multiplier', models.DecimalField(decimal_places=3, default=Decimal('5.000'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('1.0')), django.core.validators.MaxValueValidator(Decimal('10.0'))])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'pricing_zones',
                'indexes': [models.Index(fields=['city', 'is_active'], name='pricing_zon_city_96eb7f_idx'), models.Index(fields=['is_premium_zone', 'is_active'], name='pricing_zon_is_prem_46b522_idx')],
            },
        ),
        migrations.CreateModel(
            name='PromotionalCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.CharField(max_length=200)),
                ('code_type', models.CharField(choices=[('discount', 'Regular Discount'), ('first_ride', 'First Ride Discount'), ('surge_waiver', 'Surge Waiver'), ('tier_upgrade', 'Tier Upgrade'), ('cashback', 'Cashback')], max_length=20)),
                ('discount_type', models.CharField(choices=[('percentage', 'Percentage'), ('fixed_amount', 'Fixed Amount'), ('free_ride', 'Free Ride')], max_length=20)),
                ('discount_value', models.DecimalField(decimal_places=2, help_text='Percentage (0-100) or fixed amount', max_digits=10)),
                ('minimum_trip_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('maximum_discount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_uses', models.IntegerField(default=0, help_text='0 = unlimited')),
                ('max_uses_per_user', models.IntegerField(default=1)),
                ('usage_count', models.IntegerField(default=0)),
                ('first_ride_only', models.BooleanField(default=False)),
                ('eligible_tiers', models.JSONField(blank=True, default=list)),
                ('applies_to_surge', models.BooleanField(default=False)),
                ('valid_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'promotional_codes',
                'indexes': [models.Index(fields=['code', 'is_active'], name='promotional_code_9ac33f_idx'), models.Index(fields=['expires_at', 'is_active'], name='promotional_expires_dd66d4_idx')],
            },
        ),
        migrations.CreateModel(
            name='PriceCalculationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pickup_latitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('pickup_longitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('dropoff_latitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('dropoff_longitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('distance_km', models.DecimalField(decimal_places=2, max_digits=8)),
                ('estimated_duration_minutes', models.IntegerField()),
                ('vehicle_type', models.CharField(max_length=20)),
                ('base_fare', models.DecimalField(decimal_places=2, max_digits=10)),
                ('distance_fare', models.DecimalField(decimal_places=2, max_digits=10)),
                ('time_fare', models.DecimalField(decimal_places=2, max_digits=10)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10)),
                ('zone_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=5)),
                ('time_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=5)),
                ('surge_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=5)),
                ('event_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=5)),
                ('tier_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=5)),
                ('total_before_discount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('promo_discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('final_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('applied_promo_code', models.CharField(blank=True, max_length=20)),
                ('pricing_factors', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'price_calculation_logs',
                'indexes': [models.Index(fields=['user', 'created_at'], name='price_calcu_user_id_8fe64a_idx'), models.Index(fields=['created_at'], name='price_calcu_created_8de27c_idx')],
            },
        ),
        migrations.CreateModel(
            name='PricingRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_type', models.CharField(choices=[('economy', 'Economy'), ('comfort', 'Comfort'), ('premium', 'Premium'), ('luxury', 'Luxury'), ('suv', 'SUV'), ('van', 'Van')], max_length=20)),
                ('base_fare', models.DecimalField(decimal_places=2, max_digits=10)),
                ('per_km_rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('per_minute_rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('minimum_fare', models.DecimalField(decimal_places=2, max_digits=10)),
                ('booking_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('normal_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=5)),
                ('premium_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.100'), max_digits=5)),
                ('vip_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.200'), max_digits=5)),
                ('effective_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('effective_until', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pricing.pricingzone')),
            ],
            options={
                'db_table': 'pricing_rules',
                'indexes': [models.Index(fields=['vehicle_type', 'zone', 'is_active'], name='pricing_rul_vehicle_078b56_idx'), models.Index(fields=['effective_from', 'effective_until'], name='pricing_rul_effecti_d1c476_idx')],
                'unique_together': {('vehicle_type', 'zone', 'effective_from')},
            },
        ),
        migrations.CreateModel(
            name='DemandSurge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active_rides', models.IntegerField(default=0)),
                ('pending_requests', models.IntegerField(default=0)),
                ('available_drivers', models.IntegerField(default=0)),
                ('demand_ratio', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=8)),
                ('surge_level', models.CharField(choices=[('none', 'No Surge'), ('low', 'Low Surge'), ('medium', 'Medium Surge'), ('high', 'High Surge'), ('very_high', 'Very High Surge'), ('extreme', 'Extreme Surge')], default='none', max_length=10)),
                ('surge_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('1.0')), django.core.validators.MaxValueValidator(Decimal('10.0'))])),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pricing.pricingzone')),
            ],
            options={
                'db_table': 'demand_surge',
                'indexes': [models.Index(fields=['zone', 'is_active', 'expires_at'], name='demand_surg_zone_id_e9e0dc_idx'), models.Index(fields=['calculated_at'], name='demand_surg_calcula_e52639_idx')],
            },
        ),
        migrations.CreateModel(
            name='SpecialEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('event_type', models.CharField(choices=[('concert', 'Concert'), ('sports', 'Sports Event'), ('conference', 'Conference'), ('festival', 'Festival'), ('holiday', 'Holiday'), ('weather', 'Weather Event'), ('emergency', 'Emergency'), ('other', 'Other')], max_length=20)),
                ('venue_name', models.CharField(blank=True, max_length=200)),
                ('organizer', models.CharField(blank=True, max_length=200)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('base_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.500'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('1.0')), django.core.validators.MaxValueValidator(Decimal('10.0'))])),
                ('peak_multiplier', models.DecimalField(decimal_places=3, default=Decimal('2.000'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('1.0')), django.core.validators.MaxValueValidator(Decimal('10.0'))])),
                ('peak_start_offset', models.DurationField(default=datetime.timedelta(days=-1, seconds=84600), help_text='Peak starts this duration before event start')),
                ('peak_end_offset', models.DurationField(default=datetime.timedelta(seconds=3600), help_text='Peak ends this duration after event start')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('affected_zones', models.ManyToManyField(blank=True, to='pricing.pricingzone')),
            ],
            options={
                'db_table': 'special_events',
                'indexes': [models.Index(fields=['start_datetime', 'end_datetime'], name='special_eve_start_d_6f28d8_idx'), models.Index(fields=['event_type', 'is_active'], name='special_eve_event_t_614b80_idx')],
            },
        ),
    ]
