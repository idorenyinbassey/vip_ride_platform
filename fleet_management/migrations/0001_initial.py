# Generated by Django 5.2.5 on 2025-08-06 13:57

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FleetCompany',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=200)),
                ('company_registration_number', models.CharField(max_length=50, unique=True)),
                ('tax_id', models.CharField(max_length=50, unique=True)),
                ('company_size', models.CharField(choices=[('small', 'Small (1-10 vehicles)'), ('medium', 'Medium (11-50 vehicles)'), ('large', 'Large (51-200 vehicles)'), ('enterprise', 'Enterprise (200+ vehicles)')], default='small', max_length=15)),
                ('business_address', models.TextField()),
                ('business_phone', models.CharField(max_length=20)),
                ('business_email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True)),
                ('offers_premium_vehicles', models.BooleanField(default=True)),
                ('offers_luxury_vehicles', models.BooleanField(default=False)),
                ('offers_vip_services', models.BooleanField(default=False)),
                ('priority_vip_allocation', models.BooleanField(default=True)),
                ('operational_cities', models.TextField(help_text='Comma-separated list of cities')),
                ('airport_service_available', models.BooleanField(default=False)),
                ('hotel_partnership_eligible', models.BooleanField(default=True)),
                ('business_license', models.FileField(upload_to='fleet_docs/licenses/')),
                ('tax_certificate', models.FileField(upload_to='fleet_docs/tax/')),
                ('insurance_certificate', models.FileField(upload_to='fleet_docs/insurance/')),
                ('fleet_insurance_policy', models.FileField(blank=True, null=True, upload_to='fleet_docs/fleet_insurance/')),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('verification_level', models.CharField(choices=[('basic', 'Basic Verification'), ('premium', 'Premium Verification'), ('enterprise', 'Enterprise Verification')], default='basic', max_length=20)),
                ('fixed_rate_per_km', models.DecimalField(decimal_places=2, help_text='Fixed rate per kilometer for fleet vehicles', max_digits=8)),
                ('premium_rate_multiplier', models.DecimalField(decimal_places=2, default=1.5, help_text='Multiplier for premium vehicle rates', max_digits=4)),
                ('vip_rate_multiplier', models.DecimalField(decimal_places=2, default=2.0, help_text='Multiplier for VIP service rates', max_digits=4)),
                ('platform_commission_rate', models.DecimalField(decimal_places=2, default=15.0, help_text='Platform commission percentage', max_digits=5)),
                ('driver_commission_rate', models.DecimalField(decimal_places=2, default=70.0, help_text='Driver commission percentage', max_digits=5)),
                ('total_vehicles', models.PositiveIntegerField(default=0)),
                ('active_vehicles', models.PositiveIntegerField(default=0)),
                ('premium_vehicles', models.PositiveIntegerField(default=0)),
                ('total_drivers', models.PositiveIntegerField(default=0)),
                ('active_drivers', models.PositiveIntegerField(default=0)),
                ('monthly_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('total_rides_completed', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fleet_companies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Fleet Companies',
                'db_table': 'fleet_companies',
                'indexes': [models.Index(fields=['company_registration_number'], name='fleet_compa_company_44e678_idx'), models.Index(fields=['is_verified', 'is_active'], name='fleet_compa_is_veri_e86349_idx'), models.Index(fields=['verification_level'], name='fleet_compa_verific_1b01aa_idx'), models.Index(fields=['company_size'], name='fleet_compa_company_c67776_idx'), models.Index(fields=['offers_premium_vehicles'], name='fleet_compa_offers__c2253b_idx'), models.Index(fields=['created_at'], name='fleet_compa_created_4f0ab3_idx')],
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('make', models.CharField(max_length=50)),
                ('model', models.CharField(max_length=50)),
                ('year', models.PositiveIntegerField()),
                ('license_plate', models.CharField(max_length=20, unique=True)),
                ('vin_number', models.CharField(max_length=17, unique=True)),
                ('color', models.CharField(max_length=30)),
                ('category', models.CharField(choices=[('CLASSIC', 'Classic Car'), ('PREMIUM', 'Premium Car'), ('VAN', 'Van'), ('LUXURY', 'Luxury Car')], default='CLASSIC', max_length=10)),
                ('engine_type', models.CharField(choices=[('V6', 'V6 Engine'), ('V8', 'V8 Engine'), ('4_stroke', '4-Stroke Engine'), ('electric', 'Electric'), ('hybrid', 'Hybrid')], default='4_stroke', max_length=15)),
                ('engine_displacement', models.DecimalField(blank=True, decimal_places=1, help_text='Engine displacement in liters', max_digits=4, null=True)),
                ('ownership_status', models.CharField(choices=[('owned', 'Owned'), ('leased_to_fleet', 'Leased to Fleet'), ('fleet_owned', 'Fleet Owned'), ('financing', 'Under Financing')], default='owned', max_length=20)),
                ('passenger_capacity', models.PositiveIntegerField(default=4)),
                ('luggage_capacity', models.CharField(blank=True, max_length=50)),
                ('status', models.CharField(choices=[('active', 'Active'), ('maintenance', 'Under Maintenance'), ('inactive', 'Inactive'), ('retired', 'Retired')], default='active', max_length=12)),
                ('registration_number', models.CharField(max_length=50)),
                ('insurance_policy_number', models.CharField(max_length=50)),
                ('insurance_expiry_date', models.DateField()),
                ('road_worthiness_expiry', models.DateField()),
                ('comprehensive_insurance', models.BooleanField(default=True)),
                ('front_image', models.ImageField(upload_to='vehicles/images/')),
                ('back_image', models.ImageField(upload_to='vehicles/images/')),
                ('interior_image', models.ImageField(upload_to='vehicles/images/')),
                ('side_image', models.ImageField(blank=True, null=True, upload_to='vehicles/images/')),
                ('registration_document', models.FileField(upload_to='vehicles/documents/')),
                ('insurance_document', models.FileField(upload_to='vehicles/documents/')),
                ('road_worthiness_certificate', models.FileField(blank=True, null=True, upload_to='vehicles/documents/')),
                ('fuel_consumption_per_km', models.DecimalField(decimal_places=2, help_text='Liters per kilometer', max_digits=5)),
                ('fuel_type', models.CharField(choices=[('petrol', 'Petrol/Gasoline'), ('diesel', 'Diesel'), ('electric', 'Electric'), ('hybrid', 'Hybrid'), ('lpg', 'LPG')], default='petrol', max_length=20)),
                ('has_air_conditioning', models.BooleanField(default=True)),
                ('has_gps', models.BooleanField(default=True)),
                ('has_wifi', models.BooleanField(default=False)),
                ('has_baby_seat', models.BooleanField(default=False)),
                ('has_wheelchair_access', models.BooleanField(default=False)),
                ('has_luxury_interior', models.BooleanField(default=False)),
                ('has_partition', models.BooleanField(default=False)),
                ('has_premium_sound', models.BooleanField(default=False)),
                ('current_mileage', models.PositiveIntegerField(default=0)),
                ('last_mileage_update', models.DateTimeField(blank=True, null=True)),
                ('last_maintenance_date', models.DateField(blank=True, null=True)),
                ('next_maintenance_date', models.DateField(blank=True, null=True)),
                ('maintenance_interval_km', models.PositiveIntegerField(default=10000)),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('current_market_value', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_vehicles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'vehicles',
                'indexes': [models.Index(fields=['license_plate'], name='vehicles_license_b08e3c_idx'), models.Index(fields=['vin_number'], name='vehicles_vin_num_c15481_idx'), models.Index(fields=['owner'], name='vehicles_owner_i_b73183_idx'), models.Index(fields=['category'], name='vehicles_categor_381d7b_idx'), models.Index(fields=['engine_type'], name='vehicles_engine__715407_idx'), models.Index(fields=['ownership_status'], name='vehicles_ownersh_101bf6_idx'), models.Index(fields=['status'], name='vehicles_status_e44f2b_idx'), models.Index(fields=['created_at'], name='vehicles_created_b41437_idx')],
            },
        ),
    ]
