"""
Django settings for vip_ride_platform project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Generate a strong SECRET_KEY for production (50+ chars, 5+ unique chars)
SECRET_KEY = os.environ.get(
    'SECRET_KEY', 
    'vip-ride-platform-prod-key-2025-$#@!*&^%abcdefghijklmnopqrstuvwxyz123456789'
)

# SECURITY WARNING: don't run with debug turned on in production!
# For development, set DEBUG=True via environment variable
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# For development server, you can run with:
# export DEBUG=True (Linux/Mac) or set DEBUG=True (Windows)
# This will disable SSL redirects and secure cookies for local development

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps
    'rest_framework',
    'corsheaders',
    'django_filters',
    'django_extensions',
    'channels',
    'marketing',
    
    # Custom apps
    'gps_tracking',
    'accounts',
    'rides',
    'payments',
    'pricing',
    'hotels',
    'hotel_partnerships',
    'notifications',
    'control_center',
    'fleet_management',
    'vehicle_leasing',
    'portal',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'accounts.security_middleware.CustomSecurityMiddleware',  # Custom security middleware
    'accounts.rate_limit_middleware.RateLimitMiddleware',  # Rate limiting
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # RBAC Middleware (add after authentication)
    'accounts.rbac_middleware.RBACauditMiddleware',
    'accounts.rbac_middleware.SecurityMonitoringMiddleware',
]

ROOT_URLCONF = 'vip_ride_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [BASE_DIR / 'marketing' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vip_ride_platform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use SQLite for development to avoid PostgreSQL connection issues
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# For production, use PostgreSQL (can be switched via environment)
if os.environ.get('USE_POSTGRES') == 'true':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_NAME', 'vip_ride_platform'),
            'USER': os.environ.get('DB_USER', 'postgres'),
            'PASSWORD': os.environ.get('DB_PASSWORD', 'password'),
            'HOST': os.environ.get('DB_HOST', 'localhost'),
            'PORT': os.environ.get('DB_PORT', '5432'),
        }
    }

# Redis Configuration
REDIS_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')

# Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': REDIS_URL,
    }
}

# Celery Configuration
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Lagos'  # Nigeria timezone

USE_I18N = True

USE_TZ = True

# i18n languages supported for marketing site
LANGUAGES = [
    ('en', _('English')),
    ('fr', _('French')),
    ('ar', _('Arabic')),
]
LOCALE_PATHS = [BASE_DIR / 'locale']


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour'
    }
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8081",  # React Native Metro
]

CORS_ALLOW_CREDENTIALS = True

# Security Settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Additional Security Headers
# Enable SSL redirect and secure cookies by default in production
# but allow explicit override via environment variables.
SECURE_SSL_REDIRECT = os.environ.get(
    'SECURE_SSL_REDIRECT', 'True' if not DEBUG else 'False'
).lower() == 'true'
SECURE_HSTS_SECONDS = int(
    os.environ.get('SECURE_HSTS_SECONDS', '31536000')
)  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Session Security
# Only require secure cookies in production by default
SESSION_COOKIE_SECURE = os.environ.get(
    'SESSION_COOKIE_SECURE', 'True' if not DEBUG else 'False'
).lower() == 'true'
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# CSRF Security
# Only require secure CSRF cookies in production by default
CSRF_COOKIE_SECURE = os.environ.get(
    'CSRF_COOKIE_SECURE', 'True' if not DEBUG else 'False'
).lower() == 'true'
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'

# Content Security Policy (basic)
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'")
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")
CSP_IMG_SRC = ("'self'", "data:", "https:")
CSP_FONT_SRC = ("'self'", "https:")
CSP_CONNECT_SRC = ("'self'",)
CSP_FRAME_ANCESTORS = ("'none'",)

# Encryption Settings for VIP GPS
ENCRYPTION_KEY = os.environ.get(
    'ENCRYPTION_KEY', 'your-32-byte-encryption-key-here'
)

# Channels Configuration
ASGI_APPLICATION = 'vip_ride_platform.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            # Use REDIS_URL so it works locally and in production
            # (supports redis://host:port/db)
            'hosts': [REDIS_URL],
        },
    },
}

# GPS Tracking Configuration
GOOGLE_MAPS_API_KEY = os.environ.get('GOOGLE_MAPS_API_KEY', '')

# GPS tracking settings
GPS_TRACKING = {
    'MAX_ACCURACY_METERS': 100,
    'VIP_MAX_ACCURACY_METERS': 20,
    'MAX_SPEED_KMH': 200,
    'LOCATION_RETENTION_DAYS': 30,
    'VIP_LOCATION_RETENTION_DAYS': 365,
    'GEOFENCE_CHECK_ENABLED': True,
    'REAL_TIME_ETA_ENABLED': True,
    'OFFLINE_BUFFER_MAX_SIZE': 1000,
}

# WebSocket settings
WEBSOCKET_HEARTBEAT_INTERVAL = 30  # seconds
WEBSOCKET_MAX_CONNECTIONS_PER_USER = 5

# Commission Rates
COMMISSION_RATES = {
    'NORMAL': {'min': 0.15, 'max': 0.20},
    'PREMIUM': {'min': 0.20, 'max': 0.25},
    'VIP': {'min': 0.25, 'max': 0.30},
}

# Driver Subscription Fees (monthly in USD)
DRIVER_SUBSCRIPTION_FEES = {
    'BASIC': 99,
    'PREMIUM': 199,
    'VIP': 299,
}

# Payment Gateway Configuration
PAYSTACK_PUBLIC_KEY = os.environ.get('PAYSTACK_PUBLIC_KEY', '')
PAYSTACK_SECRET_KEY = os.environ.get('PAYSTACK_SECRET_KEY', '')
PAYSTACK_WEBHOOK_SECRET = os.environ.get('PAYSTACK_WEBHOOK_SECRET', '')
PAYSTACK_TEST_MODE = os.environ.get(
    'PAYSTACK_TEST_MODE', 'True'
).lower() == 'true'

FLUTTERWAVE_PUBLIC_KEY = os.environ.get('FLUTTERWAVE_PUBLIC_KEY', '')
FLUTTERWAVE_SECRET_KEY = os.environ.get('FLUTTERWAVE_SECRET_KEY', '')
FLUTTERWAVE_ENCRYPTION_KEY = os.environ.get('FLUTTERWAVE_ENCRYPTION_KEY', '')
FLUTTERWAVE_WEBHOOK_SECRET = os.environ.get('FLUTTERWAVE_WEBHOOK_SECRET', '')
FLUTTERWAVE_TEST_MODE = os.environ.get(
    'FLUTTERWAVE_TEST_MODE', 'True'
).lower() == 'true'

STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', '')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')
STRIPE_TEST_MODE = os.environ.get('STRIPE_TEST_MODE', 'True').lower() == 'true'

# Exchange Rate API Configuration
FIXER_API_KEY = os.environ.get('FIXER_API_KEY', '')
EXCHANGERATE_API_KEY = os.environ.get('EXCHANGERATE_API_KEY', '')
EXCHANGE_RATE_UPDATE_INTERVAL = int(
    os.environ.get('EXCHANGE_RATE_UPDATE_INTERVAL', '6')
)

# Payment Configuration
DEFAULT_PAYMENT_GATEWAY = os.environ.get('DEFAULT_PAYMENT_GATEWAY', 'paystack')
PAYMENT_GATEWAY_PRIORITY = ['paystack', 'flutterwave', 'stripe']
PAYMENT_MAX_RETRY_ATTEMPTS = int(
    os.environ.get('PAYMENT_MAX_RETRY_ATTEMPTS', '3')
)
PAYMENT_RETRY_DELAY_MINUTES = int(
    os.environ.get('PAYMENT_RETRY_DELAY_MINUTES', '5')
)

# Validate payment gateway configuration
if DEFAULT_PAYMENT_GATEWAY not in PAYMENT_GATEWAY_PRIORITY:
    from django.core.exceptions import ImproperlyConfigured
    raise ImproperlyConfigured(
        f"DEFAULT_PAYMENT_GATEWAY '{DEFAULT_PAYMENT_GATEWAY}' is not in "
        f"PAYMENT_GATEWAY_PRIORITY {PAYMENT_GATEWAY_PRIORITY}. "
        f"Valid options: {', '.join(PAYMENT_GATEWAY_PRIORITY)}"
    )

# Validate required payment gateway keys in production
# Only validate if STRICT_PRODUCTION_MODE is enabled
STRICT_PRODUCTION_MODE = os.environ.get(
    'STRICT_PRODUCTION_MODE', 'False'
).lower() == 'true'

if not DEBUG and STRICT_PRODUCTION_MODE:
    missing_keys = []
    
    # Check Paystack keys
    if not PAYSTACK_PUBLIC_KEY or not PAYSTACK_SECRET_KEY:
        missing_keys.append(
            "Paystack keys (PAYSTACK_PUBLIC_KEY, PAYSTACK_SECRET_KEY)"
        )
    
    # Check Flutterwave keys
    if (
        not FLUTTERWAVE_PUBLIC_KEY
        or not FLUTTERWAVE_SECRET_KEY
        or not FLUTTERWAVE_ENCRYPTION_KEY
    ):
        missing_keys.append(
            "Flutterwave keys (FLUTTERWAVE_PUBLIC_KEY, "
            "FLUTTERWAVE_SECRET_KEY, FLUTTERWAVE_ENCRYPTION_KEY)"
        )
    
    # Check Stripe keys
    if not STRIPE_PUBLISHABLE_KEY or not STRIPE_SECRET_KEY:
        missing_keys.append(
            "Stripe keys (STRIPE_PUBLISHABLE_KEY, STRIPE_SECRET_KEY)"
        )
    
    if missing_keys:
        from django.core.exceptions import ImproperlyConfigured
        raise ImproperlyConfigured(
            (
                "Missing required payment gateway keys in production: "
                + '; '.join(missing_keys)
            )
        )
AUTO_PAYOUT_THRESHOLD = float(os.environ.get('AUTO_PAYOUT_THRESHOLD', '100.00'))
MIN_PAYOUT_AMOUNT = float(os.environ.get('MIN_PAYOUT_AMOUNT', '10.00'))
PAYOUT_SCHEDULE = os.environ.get('PAYOUT_SCHEDULE', 'weekly')  # daily, weekly, monthly

# Payment Security Configuration
PAYMENT_ENCRYPTION_KEY = os.environ.get('PAYMENT_ENCRYPTION_KEY', ENCRYPTION_KEY)
ENCRYPT_PAYMENT_DATA = os.environ.get('ENCRYPT_PAYMENT_DATA', 'True').lower() == 'true'
PCI_COMPLIANCE_MODE = os.environ.get('PCI_COMPLIANCE_MODE', 'True').lower() == 'true'
AUDIT_ALL_TRANSACTIONS = os.environ.get('AUDIT_ALL_TRANSACTIONS', 'True').lower() == 'true'
PAYMENT_TOKEN_EXPIRY_MINUTES = int(os.environ.get('PAYMENT_TOKEN_EXPIRY_MINUTES', '30'))
WEBHOOK_TIMEOUT_SECONDS = int(os.environ.get('WEBHOOK_TIMEOUT_SECONDS', '30'))

# Payment Notifications
SEND_PAYMENT_CONFIRMATIONS = os.environ.get('SEND_PAYMENT_CONFIRMATIONS', 'True').lower() == 'true'
SEND_PAYOUT_NOTIFICATIONS = os.environ.get('SEND_PAYOUT_NOTIFICATIONS', 'True').lower() == 'true'
SEND_DISPUTE_ALERTS = os.environ.get('SEND_DISPUTE_ALERTS', 'True').lower() == 'true'
PAYMENT_ADMIN_EMAILS = os.environ.get('PAYMENT_ADMIN_EMAILS', '').split(',') if os.environ.get('PAYMENT_ADMIN_EMAILS') else []

# NDPR Compliance for Payments
PAYMENT_DATA_RETENTION_DAYS = int(os.environ.get('PAYMENT_DATA_RETENTION_DAYS', '2555'))  # 7 years
ANONYMIZE_OLD_PAYMENT_DATA = os.environ.get('ANONYMIZE_OLD_PAYMENT_DATA', 'True').lower() == 'true'
AUDIT_LOG_RETENTION_DAYS = int(os.environ.get('AUDIT_LOG_RETENTION_DAYS', '2555'))

# Multi-currency Support
ENABLE_MULTI_CURRENCY_PAYMENTS = os.environ.get('ENABLE_MULTI_CURRENCY_PAYMENTS', 'True').lower() == 'true'
PAYMENT_DASHBOARD_CACHE_TIMEOUT = int(os.environ.get('PAYMENT_DASHBOARD_CACHE_TIMEOUT', '300'))
ENABLE_REAL_TIME_PAYMENT_METRICS = os.environ.get('ENABLE_REAL_TIME_PAYMENT_METRICS', 'False').lower() == 'true'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
