# Generated by Django 5.2.5 on 2025-08-06 22:15

import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0002_initial'),
        ('rides', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='ISO 4217 currency code', max_length=3, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('symbol', models.CharField(max_length=10)),
                ('decimal_places', models.PositiveIntegerField(default=2)),
                ('usd_exchange_rate', models.DecimalField(decimal_places=6, help_text='Current rate to convert to USD', max_digits=12)),
                ('last_rate_update', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('supported_regions', models.JSONField(default=list)),
            ],
            options={
                'verbose_name_plural': 'Currencies',
                'db_table': 'payment_currencies',
                'indexes': [models.Index(fields=['code'], name='payment_cur_code_e2a506_idx'), models.Index(fields=['is_active'], name='payment_cur_is_acti_8d558f_idx'), models.Index(fields=['is_default'], name='payment_cur_is_defa_8a643d_idx')],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('payment_type', models.CharField(choices=[('ride_payment', 'Ride Payment'), ('cancellation_fee', 'Cancellation Fee'), ('subscription', 'Subscription'), ('driver_payout', 'Driver Payout'), ('refund', 'Refund'), ('commission', 'Commission')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('succeeded', 'Succeeded'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded'), ('disputed', 'Disputed'), ('chargeback', 'Chargeback')], default='pending', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('usd_amount', models.DecimalField(decimal_places=2, help_text='Amount in USD for reporting', max_digits=12)),
                ('gateway_transaction_id', models.CharField(blank=True, max_length=200)),
                ('gateway_reference', models.CharField(blank=True, max_length=200)),
                ('gateway_response', models.JSONField(blank=True, default=dict)),
                ('gateway_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('platform_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('net_amount', models.DecimalField(decimal_places=2, help_text='Amount after fees', max_digits=12)),
                ('user_tier', models.CharField(choices=[('normal', 'Normal'), ('premium', 'Premium'), ('vip', 'VIP')], max_length=10)),
                ('commission_rate', models.DecimalField(decimal_places=2, default=Decimal('15.0'), max_digits=5)),
                ('commission_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('driver_payout_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('initiated_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
                ('failure_reason', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('max_retries', models.PositiveIntegerField(default=3)),
                ('customer_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('is_test_transaction', models.BooleanField(default=False)),
                ('pci_compliance_level', models.CharField(default='LEVEL_1', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='payments.currency')),
                ('ride', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='rides.ride')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DriverPayout',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('on_hold', 'On Hold')], default='pending', max_length=15)),
                ('payout_method', models.CharField(choices=[('bank_transfer', 'Bank Transfer'), ('mobile_money', 'Mobile Money'), ('wallet', 'Digital Wallet'), ('check', 'Check'), ('cash', 'Cash')], max_length=20)),
                ('gross_earnings', models.DecimalField(decimal_places=2, max_digits=12)),
                ('commission_deducted', models.DecimalField(decimal_places=2, max_digits=10)),
                ('gateway_fees_deducted', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('tax_deducted', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('other_deductions', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('net_payout_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('gateway_payout_id', models.CharField(blank=True, max_length=200)),
                ('encrypted_bank_details', models.TextField(blank=True)),
                ('scheduled_date', models.DateTimeField()),
                ('processed_date', models.DateTimeField(blank=True, null=True)),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('failure_reason', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('tax_document_generated', models.BooleanField(default=False)),
                ('compliance_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='payments.currency')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payouts', to='accounts.driver')),
                ('rides', models.ManyToManyField(blank=True, related_name='driver_payouts', to='rides.ride')),
                ('payments', models.ManyToManyField(blank=True, related_name='driver_payouts', to='payments.payment')),
            ],
            options={
                'db_table': 'driver_payouts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentDispute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dispute_reason', models.CharField(choices=[('fraudulent', 'Fraudulent Transaction'), ('duplicate', 'Duplicate Charge'), ('unrecognized', 'Unrecognized Charge'), ('service_not_received', 'Service Not Received'), ('poor_service', 'Poor Service Quality'), ('cancellation', 'Cancellation Issue'), ('other', 'Other')], max_length=30)),
                ('status', models.CharField(choices=[('created', 'Created'), ('investigating', 'Under Investigation'), ('evidence_required', 'Evidence Required'), ('evidence_submitted', 'Evidence Submitted'), ('resolved_won', 'Resolved - Won'), ('resolved_lost', 'Resolved - Lost'), ('expired', 'Expired')], default='created', max_length=20)),
                ('disputed_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('gateway_dispute_id', models.CharField(blank=True, max_length=200)),
                ('dispute_date', models.DateTimeField()),
                ('evidence_due_date', models.DateTimeField(blank=True, null=True)),
                ('resolved_date', models.DateTimeField(blank=True, null=True)),
                ('customer_message', models.TextField(blank=True)),
                ('merchant_response', models.TextField(blank=True)),
                ('evidence_files', models.JSONField(blank=True, default=list)),
                ('resolution_outcome', models.CharField(blank=True, max_length=20)),
                ('resolution_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('internal_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_disputes', to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='payments.currency')),
                ('payment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dispute', to='payments.payment')),
            ],
            options={
                'db_table': 'payment_disputes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentAuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('payment_created', 'Payment Created'), ('payment_processed', 'Payment Processed'), ('payment_failed', 'Payment Failed'), ('refund_issued', 'Refund Issued'), ('dispute_created', 'Dispute Created'), ('payout_processed', 'Payout Processed'), ('config_changed', 'Configuration Changed'), ('access_granted', 'Access Granted'), ('access_denied', 'Access Denied')], max_length=30)),
                ('description', models.TextField()),
                ('user_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('old_values', models.JSONField(blank=True, default=dict)),
                ('new_values', models.JSONField(blank=True, default=dict)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payments.payment')),
                ('payout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payments.driverpayout')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('dispute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payments.paymentdispute')),
            ],
            options={
                'db_table': 'payment_audit_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='PaymentGateway',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('gateway_type', models.CharField(choices=[('paystack', 'Paystack'), ('flutterwave', 'Flutterwave'), ('stripe', 'Stripe'), ('razorpay', 'Razorpay'), ('paypal', 'PayPal')], max_length=20)),
                ('encrypted_config', models.TextField(help_text='Encrypted API keys and config')),
                ('supports_payouts', models.BooleanField(default=False)),
                ('supports_disputes', models.BooleanField(default=False)),
                ('supports_subscriptions', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_test_mode', models.BooleanField(default=True)),
                ('priority_order', models.PositiveIntegerField(default=1)),
                ('percentage_fee', models.DecimalField(decimal_places=4, default=Decimal('0.0290'), max_digits=5)),
                ('fixed_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('supported_countries', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('supported_currencies', models.ManyToManyField(related_name='gateways', to='payments.currency')),
            ],
            options={
                'db_table': 'payment_gateways',
                'ordering': ['priority_order'],
            },
        ),
        migrations.AddField(
            model_name='payment',
            name='gateway',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='payments.paymentgateway'),
        ),
        migrations.AddField(
            model_name='driverpayout',
            name='gateway',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='payments.paymentgateway'),
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('method_type', models.CharField(choices=[('card', 'Credit/Debit Card'), ('bank_account', 'Bank Account'), ('mobile_money', 'Mobile Money'), ('wallet', 'Digital Wallet'), ('crypto', 'Cryptocurrency')], max_length=20)),
                ('gateway_token', models.CharField(help_text="Gateway's token for payment method", max_length=200)),
                ('last_four_digits', models.CharField(blank=True, max_length=4)),
                ('brand', models.CharField(blank=True, help_text='Card brand or bank name', max_length=50)),
                ('expiry_month', models.PositiveIntegerField(blank=True, null=True)),
                ('expiry_year', models.PositiveIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gateway', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payments.paymentgateway')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'payment_methods',
            },
        ),
        migrations.AddField(
            model_name='payment',
            name='payment_method',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payments.paymentmethod'),
        ),
        migrations.CreateModel(
            name='ExchangeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.DecimalField(decimal_places=6, max_digits=12)),
                ('rate_source', models.CharField(default='API', max_length=50)),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('base_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='base_rates', to='payments.currency')),
                ('target_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_rates', to='payments.currency')),
            ],
            options={
                'db_table': 'exchange_rates',
                'ordering': ['-effective_date'],
                'indexes': [models.Index(fields=['base_currency', 'target_currency'], name='exchange_ra_base_cu_6de989_idx'), models.Index(fields=['effective_date'], name='exchange_ra_effecti_d78602_idx'), models.Index(fields=['created_at'], name='exchange_ra_created_cc54e5_idx')],
                'unique_together': {('base_currency', 'target_currency', 'effective_date')},
            },
        ),
        migrations.AddIndex(
            model_name='paymentdispute',
            index=models.Index(fields=['payment'], name='payment_dis_payment_6ab720_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentdispute',
            index=models.Index(fields=['status'], name='payment_dis_status_89341a_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentdispute',
            index=models.Index(fields=['dispute_reason'], name='payment_dis_dispute_14f113_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentdispute',
            index=models.Index(fields=['evidence_due_date'], name='payment_dis_evidenc_a4fee4_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentdispute',
            index=models.Index(fields=['assigned_to'], name='payment_dis_assigne_3c496d_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentauditlog',
            index=models.Index(fields=['action_type'], name='payment_aud_action__3aa848_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentauditlog',
            index=models.Index(fields=['user'], name='payment_aud_user_id_379087_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentauditlog',
            index=models.Index(fields=['payment'], name='payment_aud_payment_aec4a3_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentauditlog',
            index=models.Index(fields=['timestamp'], name='payment_aud_timesta_830c3f_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentgateway',
            index=models.Index(fields=['gateway_type'], name='payment_gat_gateway_8b1c45_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentgateway',
            index=models.Index(fields=['is_active'], name='payment_gat_is_acti_02d555_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentgateway',
            index=models.Index(fields=['priority_order'], name='payment_gat_priorit_f53a27_idx'),
        ),
        migrations.AddIndex(
            model_name='driverpayout',
            index=models.Index(fields=['driver'], name='driver_payo_driver__a89e71_idx'),
        ),
        migrations.AddIndex(
            model_name='driverpayout',
            index=models.Index(fields=['status'], name='driver_payo_status_35281c_idx'),
        ),
        migrations.AddIndex(
            model_name='driverpayout',
            index=models.Index(fields=['scheduled_date'], name='driver_payo_schedul_9f1d52_idx'),
        ),
        migrations.AddIndex(
            model_name='driverpayout',
            index=models.Index(fields=['period_start', 'period_end'], name='driver_payo_period__b6f3bb_idx'),
        ),
        migrations.AddIndex(
            model_name='driverpayout',
            index=models.Index(fields=['created_at'], name='driver_payo_created_8070d1_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['user'], name='payment_met_user_id_6649e0_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['gateway'], name='payment_met_gateway_bacef8_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['is_active'], name='payment_met_is_acti_395fa6_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['is_default'], name='payment_met_is_defa_11be74_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['ride'], name='payments_ride_id_38c783_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['user'], name='payments_user_id_7f3925_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status'], name='payments_status_d621e5_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_type'], name='payments_payment_ba7b87_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['gateway'], name='payments_gateway_66a182_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['gateway_transaction_id'], name='payments_gateway_f512b1_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['created_at'], name='payments_created_e3a130_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['user_tier'], name='payments_user_ti_e9fa6f_idx'),
        ),
    ]
