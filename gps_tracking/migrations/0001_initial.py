# Generated by Django 5.2.5 on 2025-08-06 18:02

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('rides', '0003_add_preference_models'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GeofenceZone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('zone_type', models.CharField(choices=[('PICKUP', 'Pickup Zone'), ('DROPOFF', 'Dropoff Zone'), ('RESTRICTED', 'Restricted Area'), ('AIRPORT', 'Airport Zone'), ('HOTEL', 'Hotel Zone'), ('VIP_ONLY', 'VIP Only Zone')], max_length=15)),
                ('boundary_coordinates', models.JSONField(help_text='Polygon boundary as array of [lat, lng] coordinates')),
                ('center_latitude', models.DecimalField(decimal_places=7, max_digits=10, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('center_longitude', models.DecimalField(decimal_places=7, max_digits=10, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('radius_meters', models.FloatField(help_text='Approximate radius in meters', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True)),
                ('requires_vip', models.BooleanField(default=False)),
                ('max_wait_time_minutes', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('priority_level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('surge_multiplier', models.DecimalField(decimal_places=2, default=Decimal('1.00'), max_digits=3, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(5.0)])),
                ('minimum_driver_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'geofence_zones',
                'indexes': [models.Index(fields=['zone_type', 'is_active'], name='geofence_zo_zone_ty_cc5af0_idx'), models.Index(fields=['requires_vip'], name='geofence_zo_require_851e78_idx')],
            },
        ),
        migrations.CreateModel(
            name='GPSLocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('encrypted_coordinates', models.TextField(blank=True, null=True)),
                ('encryption_key_hash', models.CharField(blank=True, max_length=64, null=True)),
                ('accuracy_meters', models.FloatField(help_text='GPS accuracy in meters', validators=[django.core.validators.MinValueValidator(0)])),
                ('accuracy_level', models.CharField(choices=[('HIGH', 'High (0-10m)'), ('MEDIUM', 'Medium (10-50m)'), ('LOW', 'Low (50m+)'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', max_length=10)),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('bearing', models.FloatField(blank=True, help_text='Direction in degrees (0-360)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('speed_kmh', models.FloatField(blank=True, help_text='Speed in km/h', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('location_source', models.CharField(choices=[('GPS', 'GPS Satellite'), ('NETWORK', 'Network/WiFi'), ('PASSIVE', 'Passive Location'), ('FUSED', 'Fused Location')], default='GPS', max_length=10)),
                ('device_timestamp', models.DateTimeField()),
                ('server_timestamp', models.DateTimeField(auto_now_add=True)),
                ('battery_level', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_mock_location', models.BooleanField(default=False)),
                ('is_offline_buffered', models.BooleanField(default=False)),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('PENDING', 'Pending Sync'), ('FAILED', 'Sync Failed')], default='SYNCED', max_length=20)),
                ('ride', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gps_locations', to='rides.ride')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gps_locations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'gps_locations',
                'ordering': ['-server_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='GeofenceEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('ENTER', 'Entered Zone'), ('EXIT', 'Exited Zone'), ('DWELL', 'Dwelling in Zone')], max_length=10)),
                ('event_timestamp', models.DateTimeField(auto_now_add=True)),
                ('duration_seconds', models.IntegerField(blank=True, help_text='Duration in zone (for DWELL events)', null=True)),
                ('triggered_actions', models.JSONField(default=list, help_text='Actions triggered by this event')),
                ('ride', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='geofence_events', to='rides.ride')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geofence_events', to=settings.AUTH_USER_MODEL)),
                ('geofence_zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='gps_tracking.geofencezone')),
                ('gps_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geofence_events', to='gps_tracking.gpslocation')),
            ],
            options={
                'db_table': 'geofence_events',
                'ordering': ['-event_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='OfflineGPSBuffer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_id', models.CharField(max_length=100)),
                ('buffered_locations', models.JSONField(default=list, help_text='Array of GPS locations recorded offline')),
                ('start_timestamp', models.DateTimeField()),
                ('end_timestamp', models.DateTimeField()),
                ('total_locations', models.IntegerField(default=0)),
                ('is_synced', models.BooleanField(default=False)),
                ('sync_timestamp', models.DateTimeField(blank=True, null=True)),
                ('sync_errors', models.JSONField(default=list, help_text='Errors encountered during sync')),
                ('app_version', models.CharField(max_length=20)),
                ('device_info', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offline_gps_buffer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'offline_gps_buffers',
            },
        ),
        migrations.CreateModel(
            name='RouteOptimization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pickup_latitude', models.DecimalField(decimal_places=7, max_digits=10, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('pickup_longitude', models.DecimalField(decimal_places=7, max_digits=10, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('dropoff_latitude', models.DecimalField(decimal_places=7, max_digits=10, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('dropoff_longitude', models.DecimalField(decimal_places=7, max_digits=10, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('waypoints', models.JSONField(default=list, help_text='Intermediate waypoints as [lat, lng] pairs')),
                ('optimized_route', models.JSONField(default=dict, help_text='Google Maps route response')),
                ('route_polyline', models.TextField(help_text='Encoded polyline for route visualization')),
                ('distance_meters', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('duration_seconds', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('duration_in_traffic_seconds', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('original_eta', models.DateTimeField()),
                ('current_eta', models.DateTimeField()),
                ('eta_accuracy_percentage', models.FloatField(default=85.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('status', models.CharField(choices=[('CALCULATING', 'Calculating Route'), ('OPTIMIZED', 'Route Optimized'), ('ACTIVE', 'Route Active'), ('COMPLETED', 'Route Completed'), ('CANCELLED', 'Route Cancelled')], default='CALCULATING', max_length=15)),
                ('traffic_level', models.CharField(choices=[('LOW', 'Low Traffic'), ('MODERATE', 'Moderate Traffic'), ('HEAVY', 'Heavy Traffic'), ('SEVERE', 'Severe Traffic')], default='MODERATE', max_length=10)),
                ('algorithm_used', models.CharField(default='google_maps_api', help_text='Route optimization algorithm used', max_length=50)),
                ('calculation_time_ms', models.IntegerField(blank=True, help_text='Time taken to calculate route in milliseconds', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ride', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='route_optimization', to='rides.ride')),
            ],
            options={
                'db_table': 'route_optimizations',
            },
        ),
        migrations.AddIndex(
            model_name='gpslocation',
            index=models.Index(fields=['user', '-server_timestamp'], name='gps_locatio_user_id_f23ab7_idx'),
        ),
        migrations.AddIndex(
            model_name='gpslocation',
            index=models.Index(fields=['ride', '-server_timestamp'], name='gps_locatio_ride_id_fa0341_idx'),
        ),
        migrations.AddIndex(
            model_name='gpslocation',
            index=models.Index(fields=['device_timestamp'], name='gps_locatio_device__1f4509_idx'),
        ),
        migrations.AddIndex(
            model_name='gpslocation',
            index=models.Index(fields=['sync_status'], name='gps_locatio_sync_st_f94c9d_idx'),
        ),
        migrations.AddIndex(
            model_name='geofenceevent',
            index=models.Index(fields=['user', '-event_timestamp'], name='geofence_ev_user_id_73f932_idx'),
        ),
        migrations.AddIndex(
            model_name='geofenceevent',
            index=models.Index(fields=['geofence_zone', '-event_timestamp'], name='geofence_ev_geofenc_88db9c_idx'),
        ),
        migrations.AddIndex(
            model_name='geofenceevent',
            index=models.Index(fields=['ride', '-event_timestamp'], name='geofence_ev_ride_id_da2d69_idx'),
        ),
        migrations.AddIndex(
            model_name='geofenceevent',
            index=models.Index(fields=['event_type'], name='geofence_ev_event_t_051bb2_idx'),
        ),
        migrations.AddIndex(
            model_name='offlinegpsbuffer',
            index=models.Index(fields=['user', 'is_synced'], name='offline_gps_user_id_e436c5_idx'),
        ),
        migrations.AddIndex(
            model_name='offlinegpsbuffer',
            index=models.Index(fields=['device_id'], name='offline_gps_device__89c280_idx'),
        ),
        migrations.AddIndex(
            model_name='offlinegpsbuffer',
            index=models.Index(fields=['-created_at'], name='offline_gps_created_749686_idx'),
        ),
        migrations.AddIndex(
            model_name='routeoptimization',
            index=models.Index(fields=['ride'], name='route_optim_ride_id_6b2ac7_idx'),
        ),
        migrations.AddIndex(
            model_name='routeoptimization',
            index=models.Index(fields=['status'], name='route_optim_status_7d405f_idx'),
        ),
        migrations.AddIndex(
            model_name='routeoptimization',
            index=models.Index(fields=['-updated_at'], name='route_optim_updated_6dd9e3_idx'),
        ),
    ]
